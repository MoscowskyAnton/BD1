<launch>
    <arg name="robot" default="bd1"/>
    <arg name="paused" default="false"/>
    
    
    <!-- VEL or TRAJ or EFF-->
    <arg name="servo_control" default="VEL"/>
        
    <rosparam if="$(eval servo_control == 'TRAJ')" file="$(find bd1_description)/config/bd1_control_traj_gazebo.yaml" command="load" subst_value="true"/>            
    
    <rosparam if="$(eval servo_control == 'VEL')" file="$(find bd1_description)/config/bd1_control_vel_gazebo.yaml" command="load" subst_value="true"/>
    
    <rosparam if="$(eval servo_control == 'EFF')" file="$(find bd1_description)/config/bd1_control_eff_gazebo.yaml" command="load" subst_value="true"/>            
    
    <include file="$(find bd1_config)/launch/bd1_software.launch">
        <arg name="robot" value="$(arg robot)"/>     
        <arg name="servo_control" value="$(arg servo_control)"/>
    </include>            
    
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" 
    args="-param robot_description -urdf -z 0.1 -x 0 -y 0 -Y 0 -model $(arg robot)" />        
    
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="debug" value="false" />
        <arg name="gui" value="true" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="false"/>
        <arg name="headless" value="false"/>
    </include>                                

    
    <node name="standup_gazebo_env_interface" pkg="bd1_gazebo_env_interface" type="universal_gazebo_environment_inteface.py" output="screen">
        <param name="servo_control" value="$(arg servo_control)"/>
        <param name="max_servo_vel" value="2"/>
        <param name="max_servo_eff" value="30"/>
    </node>
    
    <node if="$(eval servo_control == 'VEL')" name="manual_control" pkg="bd1_manual_control" type="manual_control_vel.py"/>
    
    <node if="$(eval servo_control == 'EFF')" name="manual_control" pkg="bd1_manual_control" type="manual_control_eff.py"/>
    
    <!--<node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure"/>-->
    
    <node name="standup_train_ppo" pkg="bd1_train" type="universal_train_ppo.py" output="screen"  required="true">
        
        <rosparam param="state">["base_pose", "base_rot_quat", "base_twist_lin", "left_leg_all_quats", "com_abs", "cop_abs"]</rosparam>
        <rosparam param="actions">["sync_legs_vel"]</rosparam>
        <!--<rosparam param="state">["base_pose", "base_rot_quat", "base_twist_lin", "left_leg_all_quats","right_leg_all_quats", "com_abs", "cop_abs"]</rosparam>
        <rosparam param="actions">["left_legs_vel", "right_legs_vel"]</rosparam>-->        
        <param name="env_interface_node_name" value="standup_gazebo_env_interface"/>        
        
        <param name="reward" value="stup_reward_z_pitch_2"/>
        <!--<param name="save_path" value="$(find bd1_train)/models/PPO/target_z/clip_minibatch_body_pitch2"/>-->
        <param name="load_path" value="$(find bd1_train)/models/PPO/target_z/clip_minibatch_body_pitch2/best_reward"/>
        <param name="mode" value="test"/>
        
        <param name="sub_method" value="clip"/>   
        <param name="num_episodes" value="2000"/>   
        <param name="backup_saves" value="200"/>
        <param name="test_episodes" value="50"/>
        <param name="max_steps" value="500"/>
        <param name="step_duration_sec" value="0.1"/>
        <param name="ppo_clip_param" value="0.2"/>
        <param name="actor_update_steps" value="10"/>   
        <param name="critic_update_steps" value="10"/>   
        
        <param name="batch_size" value="64"/>
        <param name="minibatch_size" value="32"/>
        <param name="gamma" value="0.95"/>
        
        <param name="critic_layer1_size" value="256"/>
        <param name="critic_layer2_size" value="256"/>
        <param name="critic_layer3_size" value="512"/>   
        <param name="actor_layer1_size" value="256"/>   
        <param name="actor_layer2_size" value="256"/>
        <param name="actor_layer3_size" value="512"/>                           
                                        
    </node>
    
    <node name="gazebo_center_of_mass" pkg="gazebo_center_of_mass" type="gazebo_center_of_mass.py" output="screen">
        <param name="robot_name" value="bd1" />
    </node>
    
    
    <node name="fall_detector" pkg="bd1_fall_detector" type="fall_detector_contacts" output="screen"/>
    
</launch>
    

